from fastapi import FastAPI, UploadFile, File
from fastapi.responses import HTMLResponse, JSONResponse, FileResponse, StreamingResponse
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles
import shutil
import cv2
import easyocr
import torch
import re
import fitz 
from PIL import Image
from vietocr.tool.predictor import Predictor
from vietocr.tool.config import Cfg
from docx import Document
from io import BytesIO
import os
import json
from fastapi import Request
from pydantic import BaseModel
from fastapi.responses import StreamingResponse
from concurrent.futures import ThreadPoolExecutor, as_completed
from tempfile import NamedTemporaryFile
import zipfile
import asyncio
import time

def extract_data(text):
    print("üìÑ [extract_data] Raw text input (first 200 chars):", text[:200])
    data = {}
    special_patterns = [
        (r"T√¥i l√† \(ghi h·ªç t√™n b·∫±ng ch·ªØ in hoa\):\s*([^\s]+(?:\s[^\s]+)*)\s*Gi·ªõi t√≠nh:\s*([^\s]+)", ["T√¥i l√† (ghi h·ªç t√™n b·∫±ng ch·ªØ in hoa)", "Gi·ªõi t√≠nh"]),
        (r"Sinh ng√†y:\s*([\d/]+)\s*D√¢n t·ªôc:\s*([^\s]+)\s*Qu·ªëc t·ªãch:\s*(\S.+)", ["Sinh ng√†y", "D√¢n t·ªôc", "Qu·ªëc t·ªãch"]),
        (r"ƒêi·ªán tho·∫°i \(n·∫øu c√≥\):\s*([\d]*)\s*Fax \(n·∫øu c√≥\):\s*(\d*)", ["ƒêi·ªán tho·∫°i (n·∫øu c√≥)", "Fax (n·∫øu c√≥)"]),
        (r"ƒêi·ªán tho·∫°i \(n·∫øu c√≥\):\s*([\d]*)\s*Email \(n·∫øu c√≥\):\s*([\w\.-]+@[\w\.-]+)?", ["ƒêi·ªán tho·∫°i (n·∫øu c√≥)", "Email (n·∫øu c√≥)"]),
        (r"Email \(n·∫øu c√≥\):\s*([\w\.-]+@[\w\.-]+)?\s*Website \(n·∫øu c√≥\):\s*(\S*)", ["Email (n·∫øu c√≥)", "Website (n·∫øu c√≥)"])
    ]

    # X·ª≠ l√Ω c√°c pattern ƒë·∫∑c bi·ªát
    for pattern, keys in special_patterns:
        matches = re.findall(pattern, text)
        print(f"Matches for pattern {pattern}: {matches}")  # Debug line
        for match in matches:
            for i, key in enumerate(keys):
                value = match[i].strip() if match[i] else None
                data[key] = value

    # X·ª≠ l√Ω c√°c d√≤ng d·ªØ li·ªáu chung
    pattern = r"^(.*?):\s*(.*?)(?=\n|$)"
    matches = re.findall(pattern, text, re.MULTILINE)
    print(f"Matches for general pattern: {matches}")  # Debug line
    for key, value in matches:
        key = key.strip()
        value = value.strip() if value.strip() else None
        if key not in data:  # Tr√°nh ghi ƒë√® d·ªØ li·ªáu ƒë√£ c√≥
            data[key] = value

    # Chuy·ªÉn ƒë·ªëi t∆∞·ª£ng data th√†nh JSON, ƒë·∫£m b·∫£o kh√¥ng m√£ h√≥a k√Ω t·ª± ti·∫øng Vi·ªát v√† ƒë·ªãnh d·∫°ng ƒë·∫πp
    json_data = json.dumps(data, ensure_ascii=False, indent=2)
    print(f"Extracted JSON data: {json_data}")  # Debug line

    return json.loads(json_data)  # Tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng JSON